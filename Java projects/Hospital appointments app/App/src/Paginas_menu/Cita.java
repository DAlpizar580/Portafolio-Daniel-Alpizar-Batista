/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package Paginas_menu;

import Info.Fechas;
import Info.citas_agendadas;
import java.awt.Color;
import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import javax.swing.JPanel;
import java.util.Date;

/**
 *
 * @author Daniel
 */
public class Cita extends javax.swing.JPanel {

    private String nombre;
    private String posicion;
    private String hora;
    private JPanel panel_principal;
    private String dia1;
    private String mes1;
    private String año1;
    /**
     * Creates new form Cita
     */
    public Cita(String nombre, String posicion, String hora, String dia1, String año1, String mes1, JPanel panel_principal) throws ParseException {
        initComponents(); // Inicializa los componentes visuales del panel.

    // Inicialización de variables con la información proporcionada.
    this.nombre = nombre;
    this.posicion = posicion;
    this.hora = hora;
    this.panel_principal = panel_principal;
    this.dia1 = dia1;
    this.mes1 = mes1;
    this.año1 = año1;

    // Definir el formato de fecha para analizar la cadena a fecha.
    DateFormat df = new SimpleDateFormat("dd/MM/yyyy");

    // Verificar la posición (doctor o paciente) y establecer los detalles de la cita en consecuencia.
    if (posicion.equals("doctor")) {
        for (ArrayList<String> cita : citas_agendadas.getCitas()) {
            // Compara los detalles de la cita con los datos proporcionados y establece la información mostrada.
            if (this.nombre.equals(cita.get(1)) && hora.equals(cita.get(3)) &&
                    dia1.equals(cita.get(6)) && año1.equals(cita.get(4)) && mes1.equals(cita.get(5))) {
                txt_paciente.setText("Nombre del paciente: " + cita.get(0));
                txt_doctor.setText("Nombre del doctor: " + cita.get(1));
                txt_area_motivo.setText(cita.get(2));
                box_hora.setSelectedItem(cita.get(3));
                Date date = df.parse(cita.get(7));
                fecha.setDate(date);
            }
        }
    } else if (posicion.equals("paciente")) {
        for (ArrayList<String> cita : citas_agendadas.getCitas()) {
            // Compara los detalles de la cita con los datos proporcionados y establece la información mostrada.
            if (this.nombre.equals(cita.get(0)) && hora.equals(cita.get(3)) &&
                    dia1.equals(cita.get(6)) && año1.equals(cita.get(4)) && mes1.equals(cita.get(5))) {
                txt_paciente.setText("Nombre del paciente: " + cita.get(0));
                txt_doctor.setText("Nombre del doctor: " + cita.get(1));
                txt_area_motivo.setText(cita.get(2));
                box_hora.setSelectedItem(cita.get(3));
                Date date = df.parse(cita.get(7));
                fecha.setDate(date);
            }
        }
    }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        main_panel = new javax.swing.JPanel();
        panel_editar = new javax.swing.JPanel();
        txt_editar = new javax.swing.JLabel();
        panel_cancelar = new javax.swing.JPanel();
        txt_cancelar = new javax.swing.JLabel();
        txt_paciente = new javax.swing.JLabel();
        txt_doctor = new javax.swing.JLabel();
        txt_editar3 = new javax.swing.JLabel();
        txt_editar4 = new javax.swing.JLabel();
        txt_motivo = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        txt_area_motivo = new javax.swing.JTextArea();
        box_hora = new javax.swing.JComboBox<>();
        fecha = new com.toedter.calendar.JDateChooser();
        mensaje = new javax.swing.JLabel();

        setBackground(new java.awt.Color(255, 255, 255));

        main_panel.setBackground(new java.awt.Color(255, 255, 255));

        panel_editar.setBackground(new java.awt.Color(64, 153, 167));
        panel_editar.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        panel_editar.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                panel_editarMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                panel_editarMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                panel_editarMouseExited(evt);
            }
        });

        txt_editar.setFont(new java.awt.Font("Roboto Medium", 1, 14)); // NOI18N
        txt_editar.setForeground(new java.awt.Color(255, 255, 255));
        txt_editar.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        txt_editar.setText("Editar Cita");

        javax.swing.GroupLayout panel_editarLayout = new javax.swing.GroupLayout(panel_editar);
        panel_editar.setLayout(panel_editarLayout);
        panel_editarLayout.setHorizontalGroup(
            panel_editarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(txt_editar, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 132, Short.MAX_VALUE)
        );
        panel_editarLayout.setVerticalGroup(
            panel_editarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(txt_editar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        panel_cancelar.setBackground(new java.awt.Color(64, 153, 167));
        panel_cancelar.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        panel_cancelar.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                panel_cancelarMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                panel_cancelarMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                panel_cancelarMouseExited(evt);
            }
        });

        txt_cancelar.setFont(new java.awt.Font("Roboto Medium", 1, 14)); // NOI18N
        txt_cancelar.setForeground(new java.awt.Color(255, 255, 255));
        txt_cancelar.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        txt_cancelar.setText("Cancelar cita");

        javax.swing.GroupLayout panel_cancelarLayout = new javax.swing.GroupLayout(panel_cancelar);
        panel_cancelar.setLayout(panel_cancelarLayout);
        panel_cancelarLayout.setHorizontalGroup(
            panel_cancelarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(txt_cancelar, javax.swing.GroupLayout.DEFAULT_SIZE, 147, Short.MAX_VALUE)
        );
        panel_cancelarLayout.setVerticalGroup(
            panel_cancelarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(txt_cancelar, javax.swing.GroupLayout.DEFAULT_SIZE, 25, Short.MAX_VALUE)
        );

        txt_paciente.setFont(new java.awt.Font("Roboto Medium", 0, 14)); // NOI18N
        txt_paciente.setText("Nombre del paciente:");

        txt_doctor.setFont(new java.awt.Font("Roboto Medium", 0, 14)); // NOI18N
        txt_doctor.setText("Nombre del doctor:");

        txt_editar3.setFont(new java.awt.Font("Roboto Medium", 0, 14)); // NOI18N
        txt_editar3.setText("Fecha:");

        txt_editar4.setFont(new java.awt.Font("Roboto Medium", 0, 14)); // NOI18N
        txt_editar4.setText("Hora:");

        txt_motivo.setFont(new java.awt.Font("Roboto Medium", 0, 14)); // NOI18N
        txt_motivo.setText("Motivo:");

        txt_area_motivo.setColumns(20);
        txt_area_motivo.setRows(5);
        txt_area_motivo.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                txt_area_motivoMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(txt_area_motivo);

        box_hora.setFont(new java.awt.Font("Roboto Medium", 0, 14)); // NOI18N
        box_hora.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "8:00 AM", "9:00 AM", "10:00 AM", "11:00 AM", "12:00 PM (Mediodía)", "1:00 PM", "2:00 PM", "3:00 PM", "4:00 PM", "5:00 PM", "6:00 PM", "7:00 PM", "8:00 PM" }));
        box_hora.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                box_horaMouseClicked(evt);
            }
        });

        fecha.setFont(new java.awt.Font("Roboto Medium", 0, 14)); // NOI18N
        fecha.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                fechaMouseClicked(evt);
            }
        });

        mensaje.setFont(new java.awt.Font("Roboto Medium", 0, 14)); // NOI18N
        mensaje.setText(" ");

        javax.swing.GroupLayout main_panelLayout = new javax.swing.GroupLayout(main_panel);
        main_panel.setLayout(main_panelLayout);
        main_panelLayout.setHorizontalGroup(
            main_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(main_panelLayout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addGroup(main_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(main_panelLayout.createSequentialGroup()
                        .addGroup(main_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(txt_paciente, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(txt_doctor, javax.swing.GroupLayout.PREFERRED_SIZE, 241, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(main_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(txt_editar3)
                            .addComponent(txt_editar4, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(main_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(fecha, javax.swing.GroupLayout.PREFERRED_SIZE, 153, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(box_hora, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(191, 191, 191))
                    .addGroup(main_panelLayout.createSequentialGroup()
                        .addGroup(main_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(mensaje, javax.swing.GroupLayout.PREFERRED_SIZE, 458, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(main_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(jScrollPane1)
                                .addGroup(javax.swing.GroupLayout.Alignment.LEADING, main_panelLayout.createSequentialGroup()
                                    .addGroup(main_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, main_panelLayout.createSequentialGroup()
                                            .addGap(8, 8, 8)
                                            .addComponent(panel_editar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addGap(43, 43, 43)
                                            .addComponent(panel_cancelar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addComponent(txt_motivo, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 62, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGap(128, 128, 128))))
                        .addGap(0, 0, Short.MAX_VALUE))))
        );
        main_panelLayout.setVerticalGroup(
            main_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(main_panelLayout.createSequentialGroup()
                .addGroup(main_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(main_panelLayout.createSequentialGroup()
                        .addGap(8, 8, 8)
                        .addGroup(main_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txt_paciente, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(txt_editar3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(main_panelLayout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(fecha, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(main_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(box_hora, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(main_panelLayout.createSequentialGroup()
                        .addGroup(main_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txt_doctor, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(txt_editar4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(13, 13, 13)))
                .addComponent(txt_motivo)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(main_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(panel_editar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(panel_cancelar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(mensaje)
                .addGap(47, 47, 47))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(main_panel, javax.swing.GroupLayout.PREFERRED_SIZE, 487, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(main_panel, javax.swing.GroupLayout.PREFERRED_SIZE, 211, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
    }// </editor-fold>//GEN-END:initComponents

    private void panel_editarMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_panel_editarMouseEntered
        Color color1 = new Color (64,130,142);
        panel_editar.setBackground(color1);
    }//GEN-LAST:event_panel_editarMouseEntered

    private void panel_editarMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_panel_editarMouseExited
        Color color2 = new Color (64,153,167);
        panel_editar.setBackground(color2);
    }//GEN-LAST:event_panel_editarMouseExited

    private void panel_cancelarMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_panel_cancelarMouseEntered
        Color color1 = new Color (64,130,142);
        panel_cancelar.setBackground(color1);
    }//GEN-LAST:event_panel_cancelarMouseEntered

    private void panel_cancelarMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_panel_cancelarMouseExited
        Color color2 = new Color (64,153,167);
        panel_cancelar.setBackground(color2);
    }//GEN-LAST:event_panel_cancelarMouseExited

    private void panel_editarMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_panel_editarMouseClicked
        if (posicion.equals("doctor"))
        {
            for (ArrayList<String> cita : citas_agendadas.getCitas()) //recorre el array de citas
            {   //if que valida la cita correcta
                if(this.nombre.equals(cita.get(1)) && this.hora.equals(cita.get(3)) && this.dia1.equals(cita.get(6)) && this.año1.equals(cita.get(4)) && this.mes1.equals(cita.get(5)))
                {   //if evitar errores por array vacio
                    if (fecha.getCalendar() != null)
                    {   //Declara variables y objetos
                        Fechas date1 = new Fechas();
                        citas_agendadas agendar = new citas_agendadas();
                        int mes = fecha.getCalendar().get(Calendar.MONTH);
                        int dia = fecha.getCalendar().get(Calendar.DATE);
                        int año = fecha.getCalendar().get(Calendar.YEAR);
                        cita.set(2, txt_area_motivo.getText());
                        if (date1.comparar(año, mes, dia)) //Comprueba que la fecha sea despues de la actual
                        {   //Comprueba que la fecha y hora esten disponibles
                            String salida = agendar.comprobar_disponibilidad(año, mes, dia, box_hora.getSelectedItem().toString(), cita.get(1), cita.get(0));
                            switch (salida) {
                                case "disponible":
                                    //edita los valores del array de citas
                                    cita.set(3, box_hora.getSelectedItem().toString());
                                    this.hora = box_hora.getSelectedItem().toString();
                                    cita.set(6, Integer.toString(dia));
                                    this.dia1 = Integer.toString(dia);
                                    cita.set(5, Integer.toString(mes));
                                    this.mes1 = Integer.toString(mes);
                                    cita.set(4, Integer.toString(año));
                                    this.año1 = Integer.toString(año);
                                    String date = Integer.toString(dia) + "/" + Integer.toString(mes + 1) + "/" + Integer.toString(año);
                                    cita.set(7, date);
                                    mensaje.setForeground(Color.green);
                                    mensaje.setText("La cita se ha editado con exito");
                                    break;
                                case "doctor":
                                    //doctor no disponible
                                    mensaje.setForeground(Color.red);
                                    mensaje.setText("Ya tienes una cita agendada a esta hora, elige otra hora");
                                    break;
                                case "paciente":
                                    //paciente no disponible
                                    mensaje.setForeground(Color.red);
                                    mensaje.setText("El paciente esta ocupado a esa hora, elige otra hora");
                                    break;
                                default:
                                    break;
                            }
                        }
                        else
                        {   //error de fecha anterior
                            mensaje.setForeground(Color.red);
                            mensaje.setText("No puede elegir una fecha anterior o igual a la actual");
                        }
                    }
                }
            }
        }
        else if (posicion.equals("paciente"))
        {
            for (ArrayList<String> cita : citas_agendadas.getCitas()) //recorre el array de citas
            {   //if que valida la cita correcta
                if(this.nombre.equals(cita.get(0)) && this.hora.equals(cita.get(3)) && this.dia1.equals(cita.get(6)) && this.año1.equals(cita.get(4)) && this.mes1.equals(cita.get(5)))
                {   //if evitar errores por array vacio
                    if (fecha.getCalendar() != null)
                    {   //Declara variables y objetos
                        Fechas date1 = new Fechas();
                        citas_agendadas agendar = new citas_agendadas();
                        int mes = fecha.getCalendar().get(Calendar.MONTH);
                        int dia = fecha.getCalendar().get(Calendar.DATE);
                        int año = fecha.getCalendar().get(Calendar.YEAR);
                        if (date1.comparar(año, mes, dia)) //Comprueba que la fecha sea despues de la actual
                        {   //Comprueba que la fecha y hora esten disponibles
                            String salida = agendar.comprobar_disponibilidad(año, mes, dia, box_hora.getSelectedItem().toString(), cita.get(1), cita.get(0));
                            switch (salida) {
                                case "disponible":
                                    //edita los valores del array de citas
                                    cita.set(2, txt_area_motivo.getText());
                                    cita.set(3, box_hora.getSelectedItem().toString());
                                    this.hora = box_hora.getSelectedItem().toString();
                                    cita.set(6, Integer.toString(dia));
                                    this.dia1 = Integer.toString(dia);
                                    cita.set(5, Integer.toString(mes));
                                    this.mes1 = Integer.toString(mes);
                                    cita.set(4, Integer.toString(año));
                                    this.año1 = Integer.toString(año);
                                    String date = Integer.toString(dia) + "/" + Integer.toString(mes + 1) + "/" + Integer.toString(año);
                                    cita.set(7, date);
                                    mensaje.setForeground(Color.green);
                                    mensaje.setText("La cita se ha editado con exito");
                                    break;
                                case "doctor":
                                    //doctor no disponible
                                    mensaje.setForeground(Color.red);
                                    mensaje.setText("El doctor esta ocupado a esa hora, elige otra hora");
                                    break;
                                case "paciente":
                                    //paciente no disponible
                                    mensaje.setForeground(Color.red);
                                    mensaje.setText("Ya tienes una cita agendada a esta hora, elige otra hora");
                                    break;
                                default:
                                    break;
                            }
                        }
                        else
                        {   //error de fecha anterior
                            mensaje.setForeground(Color.red);
                            mensaje.setText("No puede elegir una fecha anterior o igual a la actual");
                        }
                    }
                }
            }
        }
    }//GEN-LAST:event_panel_editarMouseClicked

    private void panel_cancelarMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_panel_cancelarMouseClicked
        //crea copia del array de citas para editaro y usarle en el set para modificar el array de citas
        ArrayList<ArrayList<String>> Citas1 = new ArrayList<>();
        Citas1 = citas_agendadas.getCitas();
        if (posicion.equals("doctor"))
        {   
            for (ArrayList<String> cita : citas_agendadas.getCitas()) //recorre el array de citas
            {   //if que valida la cita correcta
                if(this.nombre.equals(cita.get(1)) && this.hora.equals(cita.get(3)) && this.dia1.equals(cita.get(6)) && this.año1.equals(cita.get(4)) && this.mes1.equals(cita.get(5)))
                {
                    Citas1.remove(cita); //quita la cita del array copia
                    citas_agendadas.setCitas(Citas1); //cambia el array original por el copia con la cita quitada
                    panel_principal.remove(this); //elimina la cita del GUI
                    // refresh del panel
                    panel_principal.repaint();
                    panel_principal.revalidate();
                    break;
                }
            }
        }
        else if (posicion.equals("paciente"))
        {
            for (ArrayList<String> cita : citas_agendadas.getCitas()) //recorre el array de citas
            {   //if que valida la cita correcta
                if(this.nombre.equals(cita.get(0)) && this.hora.equals(cita.get(3)) && this.dia1.equals(cita.get(6)) && this.año1.equals(cita.get(4)) && this.mes1.equals(cita.get(5)))
                {
                    Citas1.remove(cita); //quita la cita del array copia
                    citas_agendadas.setCitas(Citas1); //cambia el array original por el copia con la cita quitada
                    panel_principal.remove(this); //elimina la cita del GUI
                    panel_principal.repaint();
                    panel_principal.revalidate();
                    break;
                }
            }
        }
    }//GEN-LAST:event_panel_cancelarMouseClicked

    private void fechaMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_fechaMouseClicked
        mensaje.setText("");
    }//GEN-LAST:event_fechaMouseClicked

    private void box_horaMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_box_horaMouseClicked
        mensaje.setText("");
    }//GEN-LAST:event_box_horaMouseClicked

    private void txt_area_motivoMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_txt_area_motivoMouseClicked
        mensaje.setText("");
    }//GEN-LAST:event_txt_area_motivoMouseClicked


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> box_hora;
    private com.toedter.calendar.JDateChooser fecha;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JPanel main_panel;
    private javax.swing.JLabel mensaje;
    private javax.swing.JPanel panel_cancelar;
    private javax.swing.JPanel panel_editar;
    private javax.swing.JTextArea txt_area_motivo;
    private javax.swing.JLabel txt_cancelar;
    private javax.swing.JLabel txt_doctor;
    private javax.swing.JLabel txt_editar;
    private javax.swing.JLabel txt_editar3;
    private javax.swing.JLabel txt_editar4;
    private javax.swing.JLabel txt_motivo;
    private javax.swing.JLabel txt_paciente;
    // End of variables declaration//GEN-END:variables
}
